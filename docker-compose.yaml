version: '3.8'

services:
  exam-dotnet-api:
    container_name: exam-dotnet-api
    build:
      context: ./dockerfiles/api
      dockerfile: Dockerfile.api
    ports:
      - "8005:8005"
      - "5079:5079"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8005
    volumes:
      - ./api:/app
    depends_on:
      exam-pg-container:
        condition: service_healthy
    networks:
      - mynetwork

  exam-badge-api:
    container_name: exam-badge-api
    build:
      context: ./dockerfiles/badge
      dockerfile: Dockerfile.badge
    ports:
      - "8006:8006"
      - "5080:5080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8006
    volumes:
      - ./Services/BadgeService:/app
    depends_on:
      exam-pg-container:
        condition: service_healthy
    networks:
      - mynetwork      

  exam-outbox-publisher:
    container_name: exam-outbox-publisher
    build:
      context: ./dockerfiles/outboxpub
      dockerfile: Dockerfile.outboxpub
    ports:
      - "8007:8007"
      - "5081:5081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8007
    volumes:
      - ./Services/OutboxPublisher:/app
    depends_on:
      exam-pg-container:
        condition: service_healthy
    networks:
      - mynetwork        

  angular-app:
    container_name: angular-app
    build:
      context: ./dockerfiles/ui
      dockerfile: Dockerfile.ui
    image: exam-angular:latest
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=development
    depends_on:
      - exam-dotnet-api
    networks:
      - mynetwork
    volumes:
      - ./ui:/app      

  exam-pg-container:
    container_name: exam_pg_container
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: examuser
      POSTGRES_PASSWORD: exampass
      POSTGRES_DB: worksheet
    ports:
      - "5433:5432"
    volumes:
     - ./postgres/examdata:/var/lib/postgresql/data
     - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U examuser -d examination"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork  

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@exam.com
      PGADMIN_DEFAULT_PASSWORD: adminpass
    ports:
      - "5051:80"
    depends_on:
      exam-pg-container:
        condition: service_healthy
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin        
    networks:
      - mynetwork

  # nginx:
  #   build:
  #     context: ./dockerfiles/nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - exam-dotnet-api
  #     - angular-app
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - ./dockerfiles/nginx/nginx.conf:/etc/nginx/nginx.conf


  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"  # MinIO API Portu
      - "9001:9001"  # MinIO Yönetim Paneli
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./minio-data:/data
    networks:
      - mynetwork

  question-detector-dev:
    container_name: question-detector-dev
    build:
      context: .
      dockerfile: question-detector/Dockerfile
    volumes:
      - ./question-detector/app:/app
    working_dir: /app
    tty: true
    stdin_open: true
    ports:
      - "8888:8888"  # Jupyter Notebook veya diğer servisler için hazır
      - "8080:8080"  # FastAPI veya diğer servisler için hazır
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP portu (backend ile iletişim)
      - "15672:15672" # Yönetim paneli (browser'dan erişim için)
    environment:
      RABBITMQ_DEFAULT_USER: rabbituser
      RABBITMQ_DEFAULT_PASS: rabbitpass
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    networks:
      - mynetwork

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: exam_pg_container
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: examuser
      KC_DB_PASSWORD: exampass
      KC_PROXY: edge
    ports:
      - "8081:8080"
    depends_on:
      - exam-pg-container
    networks:
      - mynetwork

  # kong:
  #   image: kong/kong-gateway:3.6
  #   container_name: kong
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: exam_pg_container
  #     KONG_PG_USER: examuser
  #     KONG_PG_PASSWORD: exampass
  #     KONG_PG_DATABASE: kong
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   ports:
  #     - "8000:8000"  # Public proxy port (client istekleri)
  #     - "8001:8001"  # Admin API port (plugin ayarları vs)
  #   depends_on:
  #     - exam-pg-container
  #   networks:
  #     - mynetwork

  # kong-migrations:
  #   image: kong/kong-gateway:3.6
  #   container_name: kong-migrations
  #   command: kong migrations bootstrap
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: exam_pg_container
  #     KONG_PG_USER: examuser
  #     KONG_PG_PASSWORD: exampass
  #     KONG_PG_DATABASE: kong
  #   depends_on:
  #     - exam-pg-container
  #   networks:
  #     - mynetwork

  ocelot-gateway:
    container_name: ocelot-gateway
    build:
      context: ./dockerfiles/gateway
      dockerfile: Dockerfile.ocelot
    ports:
      - "5678:5678" # dış dünya için gateway portu
    volumes:
      - ./Services/Gateway:/app
    depends_on:
      - angular-app
      - exam-dotnet-api
      - exam-badge-api
    networks:
      - mynetwork

  

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --requirepass MyStrongRedisPassword
    networks:
      - mynetwork

  k6:
    build:
      context: ./dockerfiles/k6
      dockerfile: Dockerfile.k6
    volumes:
      - ./k6:/home/k6/testfiles
    # entrypoint: ["k6", "run", "/load_test.js"]      
    networks:
      - mynetwork

  baget:
    image: loicsharma/baget
    platform: linux/amd64 
    container_name: baget
    ports:
      - "8008:80"
    volumes:
      - ./nuget-packages:/var/baget
    environment:
      - ApiKey=dev123
      - Storage__Type=FileSystem
      - Storage__Path=/var/baget/packages
      - Database__Type=Sqlite
      - Database__ConnectionString=Data Source=/var/baget/baget.db
      - Search__Type=Database
    networks:
      - mynetwork      


networks:   
  mynetwork:
    driver: bridge
