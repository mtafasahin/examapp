// <auto-generated />
using System;
using FinanceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceApi.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20250708083155_AddProfitLossHistory")]
    partial class AddProfitLossHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceApi.Models.Asset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("ChangePercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ChangeValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Type")
                        .IsUnique();

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ChangePercentage = 2.5m,
                            ChangeValue = 2.08m,
                            Currency = "TRY",
                            CurrentPrice = 85.50m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(5895),
                            Name = "Tüpraş",
                            Symbol = "TUPRS",
                            Type = 0
                        },
                        new
                        {
                            Id = "2",
                            ChangePercentage = -1.2m,
                            ChangeValue = -0.51m,
                            Currency = "TRY",
                            CurrentPrice = 42.30m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(5956),
                            Name = "Akbank",
                            Symbol = "AKBNK",
                            Type = 0
                        },
                        new
                        {
                            Id = "3",
                            ChangePercentage = 3.1m,
                            ChangeValue = 4.71m,
                            Currency = "TRY",
                            CurrentPrice = 156.80m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(5987),
                            Name = "Türk Hava Yolları",
                            Symbol = "THYAO",
                            Type = 0
                        },
                        new
                        {
                            Id = "9",
                            ChangePercentage = 1.8m,
                            ChangeValue = 2.22m,
                            Currency = "TRY",
                            CurrentPrice = 125.40m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(5993),
                            Name = "Aselsan",
                            Symbol = "ASELS",
                            Type = 0
                        },
                        new
                        {
                            Id = "10",
                            ChangePercentage = -0.8m,
                            ChangeValue = -0.26m,
                            Currency = "TRY",
                            CurrentPrice = 31.85m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(5999),
                            Name = "Ereğli Demir Çelik",
                            Symbol = "EREGL",
                            Type = 0
                        },
                        new
                        {
                            Id = "4",
                            ChangePercentage = 1.8m,
                            ChangeValue = 3.42m,
                            Currency = "USD",
                            CurrentPrice = 192.45m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6007),
                            Name = "Apple Inc.",
                            Symbol = "AAPL",
                            Type = 1
                        },
                        new
                        {
                            Id = "5",
                            ChangePercentage = -0.5m,
                            ChangeValue = -1.89m,
                            Currency = "USD",
                            CurrentPrice = 378.20m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6013),
                            Name = "Microsoft Corporation",
                            Symbol = "MSFT",
                            Type = 1
                        },
                        new
                        {
                            Id = "15",
                            ChangePercentage = 2.3m,
                            ChangeValue = 3.21m,
                            Currency = "USD",
                            CurrentPrice = 142.65m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6020),
                            Name = "Alphabet Inc.",
                            Symbol = "GOOGL",
                            Type = 1
                        },
                        new
                        {
                            Id = "16",
                            ChangePercentage = 1.1m,
                            ChangeValue = 1.65m,
                            Currency = "USD",
                            CurrentPrice = 151.94m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6025),
                            Name = "Amazon.com Inc.",
                            Symbol = "AMZN",
                            Type = 1
                        },
                        new
                        {
                            Id = "17",
                            ChangePercentage = -2.1m,
                            ChangeValue = -5.32m,
                            Currency = "USD",
                            CurrentPrice = 248.50m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6031),
                            Name = "Tesla Inc.",
                            Symbol = "TSLA",
                            Type = 1
                        },
                        new
                        {
                            Id = "6",
                            ChangePercentage = 0.8m,
                            ChangeValue = 15.92m,
                            Currency = "USD",
                            CurrentPrice = 2012.45m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6037),
                            Name = "Gold",
                            Symbol = "GOLD",
                            Type = 2
                        },
                        new
                        {
                            Id = "7",
                            ChangePercentage = -1.5m,
                            ChangeValue = -0.38m,
                            Currency = "USD",
                            CurrentPrice = 24.85m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6042),
                            Name = "Silver",
                            Symbol = "SILVER",
                            Type = 3
                        },
                        new
                        {
                            Id = "8",
                            ChangePercentage = 1.2m,
                            ChangeValue = 0.001493m,
                            Currency = "TRY",
                            CurrentPrice = 0.125864m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6047),
                            Name = "QNB Finans Portföy A.Ş. Hisse Senedi Fonu",
                            Symbol = "QNB001",
                            Type = 4
                        },
                        new
                        {
                            Id = "18",
                            ChangePercentage = 0.3m,
                            ChangeValue = 0.000259m,
                            Currency = "TRY",
                            CurrentPrice = 0.086543m,
                            LastUpdated = new DateTime(2025, 7, 8, 8, 31, 55, 9, DateTimeKind.Utc).AddTicks(6052),
                            Name = "Garanti Portföy Özel Sektör Borçlanma Araçları Fonu",
                            Symbol = "GAR001",
                            Type = 4
                        });
                });

            modelBuilder.Entity("FinanceApi.Models.AssetProfitLoss", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Investment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ProfitLossHistoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProfitLossPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ProfitLossHistoryId", "AssetId");

                    b.ToTable("AssetProfitLosses");
                });

            modelBuilder.Entity("FinanceApi.Models.AssetTypeProfitLoss", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AssetCount")
                        .HasColumnType("integer");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Investment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ProfitLossHistoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProfitLossPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ProfitLossHistoryId", "AssetType");

                    b.ToTable("AssetTypeProfitLosses");
                });

            modelBuilder.Entity("FinanceApi.Models.Portfolio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId", "AssetId")
                        .IsUnique();

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("FinanceApi.Models.ProfitLossHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssetTypeBreakdown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProfitLossPercentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCurrentValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalInvestment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalProfitLoss")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date", "Hour");

                    b.ToTable("ProfitLossHistories");
                });

            modelBuilder.Entity("FinanceApi.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PortfolioId")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("UserId", "AssetId", "Date");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinanceApi.Models.AssetProfitLoss", b =>
                {
                    b.HasOne("FinanceApi.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceApi.Models.ProfitLossHistory", "ProfitLossHistory")
                        .WithMany()
                        .HasForeignKey("ProfitLossHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("ProfitLossHistory");
                });

            modelBuilder.Entity("FinanceApi.Models.AssetTypeProfitLoss", b =>
                {
                    b.HasOne("FinanceApi.Models.ProfitLossHistory", "ProfitLossHistory")
                        .WithMany()
                        .HasForeignKey("ProfitLossHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfitLossHistory");
                });

            modelBuilder.Entity("FinanceApi.Models.Portfolio", b =>
                {
                    b.HasOne("FinanceApi.Models.Asset", "Asset")
                        .WithMany("Portfolios")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("FinanceApi.Models.Transaction", b =>
                {
                    b.HasOne("FinanceApi.Models.Asset", "Asset")
                        .WithMany("Transactions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceApi.Models.Portfolio", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PortfolioId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("FinanceApi.Models.Asset", b =>
                {
                    b.Navigation("Portfolios");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FinanceApi.Models.Portfolio", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
